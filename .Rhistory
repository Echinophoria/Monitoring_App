open(ardu)
##### starting script for micro-controller set-up and control for LTA labs
require(serial)
require(RODBC)
ardu <- serialConnection(name = "DUE",
port = "COM10",
mode = "9600,n,8,1",
buffering = "none",
newline = 1,
translation = "cr")
open(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
##### starting script for micro-controller set-up and control for LTA labs
require(serial)
require(RPostgreSQL)
require(RODBC)
ardu <- serialConnection(name = "DUE",
port = "COM10",
mode = "9600,n,8,1",
buffering = "none",
newline = 1,
translation = "cr")
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
ardu <- serialConnection(name = "DUE",
port = "COM10",
mode = "9600,n,8,1",
buffering = "none",
newline = 1,
translation = "cr")
close(ardu)
open(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu, n=0)
read.serialConnection(ardu, n=0)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu, n=0)
read.serialConnection(ardu, n=0)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu, n=0)
read.serialConnection(ardu, n=0)
read.serialConnection(ardu, n=0)
close(ardu)
open(ardu)
close(ardu)
open(ardu)
read.serialConnection(ardu, n=0)
read.serialConnection(ardu, n=0)
pH <- read.table('austevoll.cvs', header=TRUE, sep=',')
pH <- read.table('austevoll.csv', header=TRUE, sep=',')
View(pH)
pH <- read.table('austevoll.csv', header=TRUE, sep=';')
View(pH)
pH$DateTime <- as.POSIXct(strptime(pH$DateTime, format='%d.%m.%Y %H:%M'))
plot(pH$pH~pH$DateTime, col=pH$Location)
plot(pH$pH~pH$DateTime)
pH <-subset(pH, pH>7.8)
pH <-subset(pH, pH<8.7)
plot(pH$pH~pH$DateTime)
pH <-subset(pH, pH<8.5)
pH <-subset(pH, pH>7.9)
plot(pH$pH~pH$DateTime)
pH <-subset(pH, DateTime>'2020-02-01 00:00:00')
plot(pH$pH~pH$DateTime)
pH <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))
library(ggplot2)
pH <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))
pH
pH <- read.table('austevoll.csv', header=TRUE, sep=';')
pH$DateTime <- as.POSIXct(strptime(pH$DateTime, format='%d.%m.%Y %H:%M'))
plot(pH$pH~pH$DateTime)
pH <-subset(pH, DateTime>'2020-02-01 00:00:00')
pH <- read.table('austevoll.csv', header=TRUE, sep=';')
pH$DateTime <- as.POSIXct(strptime(pH$DateTime, format='%d.%m.%Y %H:%M'))
pH <-subset(pH, DateTime>'2020-01-15 00:00:00')
pH <-subset(pH, pH < 8.5)
pH <- subset(pH, pH>7.9)
plot(pH$pH~pH$DateTime)
library(ggplot2)
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
pH <-subset(pH, DateTime>'2020-01-25 00:00:00')
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
T_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=Temperature, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
T_plot
pH <-subset(pH, Temperature<9)
T_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=Temperature, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
T_plot
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
pH2 <- read.table('ph_logger_2020-01-01_2020-09-29.csv', header=TRUE, sep=',')
View(pH2)
pH2$DateTime <- as.POSIXct(strptime(pH2$datetime, format='%Y-%m-%Y %H:%M:%S'))
pH2ulvik <- subset(pH2, location=='Ulvik')
pH2auste <- subset(pH2, location=='Austevoll')
pH2 <-subset(pH, DateTime>'2020-01-25 00:00:00')
pH2ulvik <-subset(pH2ulvik, datetime>'2020-04-22 08:28:00')
pH2auste <-subset(pH2auste, datetime>'2020-04-21 08:56:00')
View(pH2auste)
View(pH2ulvik)
pH2ulvik$ph <-pH2ulvik$ph-100
plot(pH2ulvik$ph~pH2ulvik$datetime)
pH2ulvik$ph <-pH2ulvik$ph+100
pH2ulvik$ph <-pH2ulvik$ph-0.100
plot(pH2ulvik$ph~pH2ulvik$datetime)
pH2 <- read.table('ph_logger_2020-01-01_2020-09-29.csv', header=TRUE, sep=',')
pH2$DateTime <- as.POSIXct(strptime(pH2$datetime, format='%Y-%m-%Y %H:%M:%S'))
pH2ulvik <- subset(pH2, location=='Ulvik')
pH2auste <- subset(pH2, location=='Austevoll')
pH2$DateTime <- as.POSIXct(strptime(pH2$datetime, format='%Y-%m-%Y %H:%M:%S'))
pH2 <- read.table('ph_logger_2020-01-01_2020-09-29.csv', header=TRUE, sep=',')
pH2$datetime <- as.POSIXct(strptime(pH2$datetime, format='%Y-%m-%d %H:%M:%S'))
pH2ulvik <- subset(pH2, location=='Ulvik')
pH2auste <- subset(pH2, location=='Austevoll')
pH2ulvik <-subset(pH2ulvik, datetime>'2020-04-22 08:28:00')
pH2auste <-subset(pH2auste, datetime>'2020-04-21 08:56:00')
plot(pH2ulvik$ph~pH2ulvik$datetime)
pH2ulvik$ph <-pH2ulvik$ph-0.100
pH2 <- subset(pH, pH>7)
pH2ulvik$x=NULL
pH2ulvik$X=NULL
pH2auste$X=NULL
names(pH2ulvik) <- names(pH)
pH2<-rbind(pH, pH2ulvik)
pH<-pH2
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
T_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=Temperature, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
T_plot
pH<-rbind(pH, pH2auste)
names(pH2auste) <- names(pH)
pH<-rbind(pH, pH2auste)
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
T_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=Temperature, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
T_plot
pH <-subset(pH, DateTime>'2020-07-03 00:00:00')
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
pH <- read.table('austevoll.csv', header=TRUE, sep=';')
pH$DateTime <- as.POSIXct(strptime(pH$DateTime, format='%d.%m.%Y %H:%M'))
pH <-subset(pH, DateTime>'2020-01-25 00:00:00')
pH <-subset(pH, Temperature <9)
pH <- subset(pH, pH>7.9)
plot(pH$pH~pH$DateTime)
pH <-subset(pH, Temperature <8.5)
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
pH <- subset(pH, pH<8.5)
T_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=Temperature, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
T_plot
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
pH<-rbind(pH, pH2auste)
pH2<-rbind(pH, pH2ulvik)
pH <-subset(pH, DateTime<'2020-07-03 00:00:00')
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
pH<-rbind(pH, pH2ulvik)
pH <-subset(pH, DateTime<'2020-07-03 00:00:00')
pH <- subset(pH, pH<8.5)
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
pH <- subset(pH, pH>7.9)
plot(pH$pH~pH$DateTime)
pH_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=pH, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
pH_plot
T_plot <- ggplot()+
geom_line(data=pH, aes(x=DateTime, y=Temperature, colour=Location))+
scale_x_datetime(name='Date', date_breaks="1 month", date_labels="%b-%y", date_minor_breaks = '1 week')
T_plot
install.packages("rdrop2")
library(rdrop2)
drop_acc
drop_acc()
drop_exists('monitoring_app')
drop_create('monitoring_app')
drop_exists('monitoring_app')
drop_auth()
drop_auth(new_user = TRUE)
drop_exists('monitoring_app')
drop_create('monitoring_app/lists')
list.files('lists/')
setwd("C:/Monitoring_App")
list.files('lists/')
library(shiny); runApp('~/Monitoring_App/mapping_App.R')
runApp('mapping_App.R')
drop_upload(
files,
path = 'monitoring_app/lists',
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
files = list.files('lists/')
drop_upload(
files,
path = 'monitoring_app/lists',
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
files = paste('lists/', files, sep='')
drop_upload(
files,
path = 'monitoring_app/lists',
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
runApp('~/Monitoring_App/mapping_App.R')
drop_upload(
files,
path = 'monitoring_app/lists/',
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
drop_upload(
files,
path = "monitoring_app/lists/",
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
drop_upload(
files,
path = "monitoring_app/lists",
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
drop_upload(
files,
path = "/monitoring_app/lists",
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
drop_upload(
files,
path = "/monitoring_app",
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
drop_upload(
files,
path = "monitoring_app",
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
drop_upload(
files,
path = NULL,
mode = "overwrite",
autorename = FALSE,
mute = FALSE,
verbose = FALSE,
dtoken = get_dropbox_token()
)
drop_upload("lists/species.txt")
files[1]
drop_upload("files[1]")
drop_upload(files[1])
drop_upload(files[1], path=files[1])
drop_upload(files[1], path="monitoring_app/lists")
drop_upload(files[1], path="monitoring_app/lists")
drop_upload(
files,
path = "monitoring_app/lists/"
)
length(files)
for (i in 1:length(files)){
drop_upload(
files[i],
path = "monitoring_app/lists/")
}
for (i in 1:length(files)){
drop_upload(
files[i],
path = "monitoring_app/lists/")
}
drop_upload(
'logs/empty_log.txt', # upload the template
path = "monitoring_app/logs/")
runApp('~/Monitoring_App/mapping_App.R')
drop_upload(
'logs/empty_log.txt', # upload the template
path = "monitoring_app/logs/")
runApp('~/Monitoring_App/mapping_App.R')
logs =list.files('logs/')
paste('logs/', logs, sep=''), # upload the template
paste('logs/', logs, sep='') # upload the template
runApp('~/Monitoring_App/mapping_App.R')
drop_read_csv
library(shiny)
runGitHub(repo = 'shiny_geolocation', username = 'AugustT', subdir = 'accuracy_and_dynamic')
runApp('~/Monitoring_App/mapping_App.R')
runApp('~/Monitoring_App/mapping_App.R')
drop_dir()
drop_dir('monitoring_app/logs')
drop_dir('monitoring_app/logs')$path_lower
runApp('~/Monitoring_App/mapping_App.R')
token <- drop_auth()
token
saveRDS(token, "droptoken.rds")
runApp('~/Monitoring_App/mapping_App.R')
runApp('~/Monitoring_App/mapping_App.R')
runApp('~/Monitoring_App/mapping_App.R')
drop_dir('monitoring_app/logs')$path_lower
logs <- drop_dir('monitoring_app/logs')$path_lower # load the logs from your dropbox
mon <- read.table('monitoring.txt', header=TRUE, sep='\t',
colClasses = c('numeric', 'numeric', 'POSIXct', 'character','character','character','character','character','numeric'))
setwd("~/Monitoring_App")
mon <- read.table('monitoring.txt', header=TRUE, sep='\t',
colClasses = c('numeric', 'numeric', 'POSIXct', 'character','character','character','character','character','numeric'))
drop_read_csv(logs[1])
logs[1]
a=dropt_read_csv(logs[1])
a=drop_read_csv(logs[1])
drop_read_csv
tempdir()
drop_download
logs[i]
logs
pth
pth = tempdir()
pth
basename(logs)
drop_download(logs[i], local_path=pth)
drop_download(logs, local_path=pth)
drop_download(logs, local_path=pth, overwrite=TRUE)
localfile = paste0(dest, "/", basename(file))
localfile = paste0(pth, "/", basename(file))
localfile = paste0(pth, "/", basename(logs))
log <- read.table(localfile, header=TRUE, sep='\t', colClasses = c('character', 'character', 'character', 'character','POSIXct','character'),   na.strings ='NA')
View(log)
logsname <- drop_dir('monitoring_app/logs')$name # load the name of first log
logsname
gsub('_', x=logsname)
logsname(1:7)
logsname[1:7]
substr(logsname,1,7)
substr(logsname,1,8)
which(strsplit(logsname, "")[[1]]=="_")
which(strsplit(logsname, "")[[1]]=="_")[2]
substr(logsname, which(strsplit(logsname[1],"")[[1]]=="_")[2], nchar(logsname[1]))
substr(logsname, which(strsplit(logsname[1],"")[[1]]=="_")[2]+1, nchar(logsname[1]))
substr(logsname, which(strsplit(logsname[1],"")[[1]]=="_")[2]+1, nchar(logsname[1])-4)
monname <- paste('tracks',substr(logsname[1],1,8), substr(logsname, which(strsplit(logsname[1],"")[[1]]=="_")[2]+1, nchar(logsname[1])-4),
substr(logsname, which(strsplit(logsname[length(logsname)],"")[[1]]=="_")[2]+1, nchar(logsname[length(logsname)])-4) )
monname <- paste('tracks',substr(logsname[1],1,8), substr(logsname, which(strsplit(logsname[1],"")[[1]]=="_")[2]+1, nchar(logsname[1])-4),
substr(logsname, which(strsplit(logsname[length(logsname)],"")[[1]]=="_")[2]+1, nchar(logsname[length(logsname)])-4), sep='-')
monname
monname <- paste(monname, '.txt', sep='')
monname
drop_auth(new_user = TRUE)
token <- drop_auth()
token
token <- drop_auth(new_user = TRUE)
token
drop_acc()
saveRDS(token, "droptoken.rds")
> token <- drop_auth()
Adding .httr-oauth to .gitignore
Waiting for authentication in browser...
Press Esc/Ctrl + C to abort
Authentication complete.
> token
<Token>
<oauth_endpoint>
authorize: https://www.dropbox.com/oauth2/authorize
access:    https://api.dropbox.com/oauth2/token
<oauth_app> dropbox
key:    mmhfsybffdom42w
secret: <hidden>
<credentials> access_token, token_type, uid, account_id
---
> saveRDS(token, "droptoken.rds")
token <- drop_auth()
token
saveRDS(token, "droptoken.rds")
token
logs =list.files('logs/')
drop_upload(
paste('logs/', logs, sep=''), # upload the template
path = "monitoring_app/logs/")
drop_upload(
'monitoring.txt',   # this is also an example. CLEAN IT BEFORE
path = 'monitoring_app'
)
logs
runApp('mapping_App.R')
logs =list.files('logs/')
drop_upload(
paste('logs/', logs, sep=''), # upload the template
path = "monitoring_app/logs/")
runApp('mapping_App.R')
